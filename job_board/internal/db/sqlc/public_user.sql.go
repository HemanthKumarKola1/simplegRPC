// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: public_user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO public.user (userName, passwordHash, email, userType)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Username     string `json:"username"`
	Passwordhash string `json:"passwordhash"`
	Email        string `json:"email"`
	Usertype     int32  `json:"usertype"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Passwordhash,
		arg.Email,
		arg.Usertype,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.user WHERE userID = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userid int32) error {
	_, err := q.db.Exec(ctx, deleteUser, userid)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT userid, username, passwordhash, email, usertype, created_at FROM public.user WHERE userID = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userid int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Username,
		&i.Passwordhash,
		&i.Email,
		&i.Usertype,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT userid, username, passwordhash, email, usertype, created_at FROM public.user WHERE userName = $1
`

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUserName, username)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Username,
		&i.Passwordhash,
		&i.Email,
		&i.Usertype,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE public.user
SET userName = $1, email = $2
WHERE userID = $3
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Userid   int32  `json:"userid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Username, arg.Email, arg.Userid)
	return err
}
